<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Document on INFINI Pizza</title><link>/docs/references/document/</link><description>Recent content in Document on INFINI Pizza</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/references/document/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a document</title><link>/docs/references/document/create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/create/</guid><description>Create a document # Creates a new document.
Examples # Insert a JSON document into the my-collection collection:
POST /my-collection/_doc { &amp;#34;message&amp;#34;: &amp;#34;GET /search HTTP/1.1 200 1070000&amp;#34;, &amp;#34;org&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;infini&amp;#34; } } The API returns the following result:
{ &amp;#34;_id&amp;#34;: &amp;#34;0,0&amp;#34;, &amp;#34;_version&amp;#34;: 1, &amp;#34;_namespace&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;_collection&amp;#34;: &amp;#34;my-collection&amp;#34;, &amp;#34;result&amp;#34;: &amp;#34;created&amp;#34;, ... } The API supports passing a customized UUID as the document identify, eg:
POST /my-collection/_doc/news_001 { &amp;#34;message&amp;#34;: &amp;#34;GET /search HTTP/1.</description></item><item><title>Fetch a document</title><link>/docs/references/document/fetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/fetch/</guid><description>Fetch a document # Retrieve an existing document by specifying its unique identifier.
Examples # Fetch a document from the my-collection collection with customized uuid news_001:
GET /my-collection/_doc/news_001 The API returns the following result:
{ &amp;#34;_id&amp;#34;: &amp;#34;0,0&amp;#34;, &amp;#34;_version&amp;#34;: 1, &amp;#34;_collection&amp;#34;: &amp;#34;default:my-collection&amp;#34;, &amp;#34;_key&amp;#34; : &amp;#34;news_001&amp;#34;, &amp;#34;found&amp;#34;: true, &amp;#34;_source&amp;#34; : { &amp;#34;message&amp;#34;: &amp;#34;GET /search HTTP/1.1 200 1070000&amp;#34;, &amp;#34;org&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;infini&amp;#34; } } } As you can see, the customized uuid are represented as _key within the document, and there is also a _id returned with value 0,0, this is the internal id generated by Pizza, and it is guaranteed to be unique, so you can also fetch this document by this value like this:</description></item><item><title>Replace a document</title><link>/docs/references/document/replace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/replace/</guid><description>Replace a document # Replace an existing document by specifying its unique identifier and the new content.
Examples # Replace a document news_001 of the collection my-collection with new content:
PUT /my-collection/_doc/news_001 { &amp;#34;message&amp;#34;: &amp;#34;GET /search HTTP/1.1 200 1070000&amp;#34;, &amp;#34;org&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;infinilabs&amp;#34; } } The API returns as following result:
{&amp;#34;_id&amp;#34;:&amp;#34;0,0&amp;#34;, &amp;#34;_key&amp;#34;:&amp;#34;news_001&amp;#34;, &amp;#34;result&amp;#34;:&amp;#34;updated&amp;#34;} After the document modification, If you perform the fetch request:
GET /my-collection/_doc/news_001 It returns an updated document like:</description></item><item><title>Partial update a document</title><link>/docs/references/document/partial_update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/partial_update/</guid><description>Partial update a document # Sometimes we may only need to update a portion fields of the document.
Examples # Update the org.id field of the document news_001 in the collection my-collection:
PUT /my-collection/_doc/news_001/_update { &amp;#34;sync&amp;#34;:{ &amp;#34;replace&amp;#34;:{ &amp;#34;org&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;infinilabs&amp;#34; } } } } The API returns as following result:
{&amp;#34;_id&amp;#34;:&amp;#34;0,0&amp;#34;, &amp;#34;_key&amp;#34;:&amp;#34;news_001&amp;#34;, &amp;#34;result&amp;#34;:&amp;#34;updated&amp;#34;} Pizza using the method of fetching a document, then merging partial updates and replacing it.</description></item><item><title>Delete a document</title><link>/docs/references/document/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/delete/</guid><description>Delete a document # Delete a specific document from the specified collection by specifying its unique identifier.
Examples # Delete the document 0,0 from collection my-collection:
DELETE /my-collection/_doc/0,0 The API returns the following result:
{ &amp;#34;_id&amp;#34;: &amp;#34;0,0&amp;#34;, &amp;#34;result&amp;#34;: &amp;#34;deleted&amp;#34;, ... } Request # DELETE /&amp;lt;target&amp;gt;/_doc/&amp;lt;doc_id&amp;gt; Path parameters # &amp;lt;target&amp;gt;
(Required, string) Name of the collection to target. &amp;lt;doc_id&amp;gt;
(Required, string) Unique identifier for the document, support both _key or _id.</description></item><item><title>Batch document operation</title><link>/docs/references/document/bulk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/bulk/</guid><description>Batch document operation # Provides a efficient way to perform multiple index, create, delete, and update operations in a single request.
Examples # POST /_bulk { &amp;#34;index&amp;#34; : { &amp;#34;_index&amp;#34; : &amp;#34;test&amp;#34;, &amp;#34;_id&amp;#34; : &amp;#34;1&amp;#34; } } { &amp;#34;field1&amp;#34; : &amp;#34;value1&amp;#34; } { &amp;#34;delete&amp;#34; : { &amp;#34;_index&amp;#34; : &amp;#34;test&amp;#34;, &amp;#34;_id&amp;#34; : &amp;#34;2&amp;#34; } } { &amp;#34;create&amp;#34; : { &amp;#34;_index&amp;#34; : &amp;#34;test&amp;#34;, &amp;#34;_id&amp;#34; : &amp;#34;3&amp;#34; } } { &amp;#34;field1&amp;#34; : &amp;#34;value3&amp;#34; } { &amp;#34;update&amp;#34; : {&amp;#34;_id&amp;#34; : &amp;#34;1&amp;#34;, &amp;#34;_index&amp;#34; : &amp;#34;test&amp;#34;} } { &amp;#34;doc&amp;#34; : {&amp;#34;field2&amp;#34; : &amp;#34;value2&amp;#34;} } The API returns the following result:</description></item></channel></rss>