<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on INFINI Pizza</title><link>/docs/overview/</link><description>Recent content in Overview on INFINI Pizza</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/overview/index.xml" rel="self" type="application/rss+xml"/><item><title>Concepts</title><link>/docs/overview/concept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/concept/</guid><description>Concepts # Pizza is a distributed search engine designed to efficiently index and retrieve documents across large-scale datasets. It organizes data in a hierarchical structure, allowing for flexible management and retrieval capabilities.
Before you start using Pizza, familiarize yourself with the following key concepts:
[Pizza Concepts] Concepts # Cluster # A cluster represents a set of interconnected nodes that collectively form the Pizza search engine. Nodes within a cluster collaborate to store and process data efficiently.</description></item><item><title>Architecture</title><link>/docs/overview/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/architecture/</guid><description>Architecture # Share-Nothing and Asynchronous I/O in Pizza # Pizza is built upon a robust share-nothing architecture, ensuring complete isolation of resources at both the node and per-CPU level. Each CPU core and associated threads operate independently, without sharing memory or resources with other cores or nodes. Additionally, Pizza embraces a fully asynchronous manner to access I/O and network resources, leveraging technologies like io_uring for efficient I/O operations.</description></item><item><title>Why named Pizza</title><link>/docs/overview/sharding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/sharding/</guid><description>Why named Pizza? # Do you wonder why this project is named Pizza?
To infinity scaling # Pizza solves the challenge of managing massive data seamlessly. Imagine creating a collection and continuously adding documents, from zero to petabytes, without the need to worry about sharding or reindexing. Scaling your machine becomes effortless, ensuring a smooth, seamless, and painless experience for application developers.
Sharding puzzle # One of the world&amp;rsquo;s three major challenges: What is the appropriate size for an index shard?</description></item><item><title>How realtime works</title><link>/docs/overview/realtime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/realtime/</guid><description>How realtime works? # Do you like to let your customer wait? # [Pizza in Realtime]</description></item></channel></rss>