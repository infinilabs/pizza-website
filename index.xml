<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on INFINI Pizza</title><link>/</link><description>Recent content in Home on INFINI Pizza</description><generator>Hugo -- gohugo.io</generator><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Avg aggregation</title><link>/docs/references/aggregation/avg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/aggregation/avg/</guid><description>Avg aggregation # A single-value metrics aggregation that computes the average of numeric values that are extracted from the aggregated documents.
Examples # Assuming the data consists of documents representing exams grades (between 0 and 100) of students we can average their scores with:
POST /exams/_search { &amp;#34;aggs&amp;#34;: { &amp;#34;avg_grade&amp;#34;: { &amp;#34;avg&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;grade&amp;#34; } } } } The above aggregation computes the average grade over all documents.</description></item><item><title>Cluster health</title><link>/docs/administration/observability/health/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/administration/observability/health/</guid><description>Cluster health # Returns the cluster health for quick overview.
Get the whole cluster health # Requests # GET /_cluster/health Query Parameters # level
(Optional, string) Can be one of cluster, regions, collections rollings or shards. Controls the details level of the health information returned. Defaults to cluster. Get the health of a specific region # Requests # GET /_cluster/_region/&amp;lt;region_id&amp;gt;/health Path parameters # region_id</description></item><item><title>Concepts</title><link>/docs/overview/concept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/concept/</guid><description>Concepts # Pizza is a distributed search engine designed to efficiently index and retrieve documents across large-scale datasets. It organizes data in a hierarchical structure, allowing for flexible management and retrieval capabilities.
Before you start using Pizza, familiarize yourself with the following key concepts:
[Pizza Concepts] Concepts # Cluster # A cluster represents a set of interconnected nodes that collectively form the Pizza search engine. Nodes within a cluster collaborate to store and process data efficiently.</description></item><item><title>Create a collection</title><link>/docs/references/collection/create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/collection/create/</guid><description>Create a collection # Creates a new collection.
Examples # The following request creates a new collection called my-collection in the namespace my-namespace:
PUT /my-namespace:my-collection If creating a collection within the default namespace, it can be simplified as:
PUT /my-collection Request # PUT /[&amp;lt;namespace&amp;gt;:]&amp;lt;name&amp;gt; Path parameters # &amp;lt;namespace&amp;gt;
(Optional, string) The namespace which the collection belongs to. Namespace names must meet the following criteria: Lowercase only Cannot include \ /, *, ?</description></item><item><title>Create a document</title><link>/docs/references/document/create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/create/</guid><description>Create a document # Creates a new document.
Examples # Insert a JSON document into the my-collection collection:
POST /my-collection/_doc { &amp;#34;message&amp;#34;: &amp;#34;GET /search HTTP/1.1 200 1070000&amp;#34;, &amp;#34;org&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;infini&amp;#34; } } The API returns the following result:
{ &amp;#34;_id&amp;#34;: &amp;#34;0,0&amp;#34;, &amp;#34;_version&amp;#34;: 1, &amp;#34;_namespace&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;_collection&amp;#34;: &amp;#34;my-collection&amp;#34;, &amp;#34;result&amp;#34;: &amp;#34;created&amp;#34;, ... } The API supports passing a customized UUID as the document identify, eg:
POST /my-collection/_doc/news_001 { &amp;#34;message&amp;#34;: &amp;#34;GET /search HTTP/1.</description></item><item><title>Create a namespace</title><link>/docs/references/namespace/create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/namespace/create/</guid><description>Create a namespace # Creates a new namespace.
Examples # If creating a website namespace, the following request creates a new namespace called website:
PUT /_namespace/website Request # PUT /_namespace/&amp;lt;name&amp;gt; Path parameters # &amp;lt;name&amp;gt;
(Required, string) The name of the namespace. Namespace names must meet the following criteria: Lowercase only Cannot include \ /, *, ?, &amp;quot;, &amp;lt;, &amp;gt;, |, , ,, # Cannot start with -, _, + Cannot be .</description></item><item><title>Create an index</title><link>/docs/references/index/create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/index/create/</guid><description>Create an index # Creates a new index under a collectioin.
Examples # The following request creates a new index called my-index under collection my-namespace:my-collection
PUT /my-namespace:my-collection/_index/my_index Request # PUT /&amp;lt;target&amp;gt;/_index/&amp;lt;name&amp;gt; Path parameters # &amp;lt;target&amp;gt;
(Required, string) The collection which the index belongs to.
&amp;lt;name&amp;gt;
(Required, string) Name of the index you wish to create.</description></item><item><title>Date histogram aggregation</title><link>/docs/references/aggregation/date-histogram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/aggregation/date-histogram/</guid><description>Date histogram aggregation # This multi-bucket aggregation is similar to the normal histogram, but it can only be used with date or date range values. Because dates are represented internally in Elasticsearch as long values, it is possible, but not as accurate, to use the normal histogram on dates as well. The main difference in the two APIs is that here the interval can be specified using date/time expressions. Time-based data requires special support because time-based intervals are not always a fixed length.</description></item><item><title>Delete an index</title><link>/docs/references/index/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/index/delete/</guid><description>Delete an index # Deletes an existing index under a collectioin.
Examples # The following request deletes the index called my-index under collection my-namespace:my-collection
DELETE /my-namespace:my-collection/_index/my_index Request # DELETE /&amp;lt;target&amp;gt;/_index/&amp;lt;name&amp;gt; Path parameters # &amp;lt;target&amp;gt;
(Required, string) The collection which the index will be removed from.
&amp;lt;name&amp;gt;
(Required, string) Name of the index you wish to delete.</description></item><item><title>Installation</title><link>/docs/getting-started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/installation/</guid><description>Installation # Pizza is compatible with all major operating systems. The package is compiled statically, and it does not require any external dependencies.
Automatic installation # Use the following command to automatically download the latest version of INFINI Pizza for your platform and extract it into /opt/pizza:
curl -sSL http://get.infini.cloud | bash -s -- -p pizza The optional parameters for the script are as follows:
-v &amp;lt;version number&amp;gt; (default is the latest version) -d &amp;lt;installation directory&amp;gt; (default is /opt/pizza) Manual installation # Visit the URL below to download the package for your operating system:</description></item><item><title>Max aggregation</title><link>/docs/references/aggregation/max/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/aggregation/max/</guid><description>Max aggregation # A single-value metrics aggregation that keeps track and returns the maximum value among the numeric values extracted from the aggregated documents.
Examples # Computing the max price value across all documents:
POST /sales/_search { &amp;#34;aggs&amp;#34;: { &amp;#34;max_price&amp;#34;: { &amp;#34;max&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;price&amp;#34; } } } } Response:
{ ... &amp;#34;aggregations&amp;#34;: { &amp;#34;max_price&amp;#34;: { &amp;#34;value&amp;#34;: 200.0 } } } As can be seen, the name of the aggregation (max_price above) also serves as the key by which the aggregation result can be retrieved from the returned response.</description></item><item><title>Min aggregation</title><link>/docs/references/aggregation/min/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/aggregation/min/</guid><description>Min aggregation # A single-value metrics aggregation that keeps track and returns the minimum value among numeric values extracted from the aggregated documents.
Examples # Computing the min price value across all documents:
POST /sales/_search { &amp;#34;aggs&amp;#34;: { &amp;#34;min_price&amp;#34;: { &amp;#34;min&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;price&amp;#34; } } } } Response:
{ ... &amp;#34;aggregations&amp;#34;: { &amp;#34;min_price&amp;#34;: { &amp;#34;value&amp;#34;: 10.0 } } } As can be seen, the name of the aggregation (min_price above) also serves as the key by which the aggregation result can be retrieved from the returned response.</description></item><item><title>Percentiles aggregation</title><link>/docs/references/aggregation/percentiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/aggregation/percentiles/</guid><description>Percentiles aggregation # A multi-value metrics aggregation that calculates one or more percentiles over numeric values extracted from the aggregated documents.
Percentiles show the point at which a certain percentage of observed values occur. For example, the 95th percentile is the value which is greater than 95% of the observed values.
Percentiles are often used to find outliers. In normal distributions, the 0.13th and 99.87th percentiles represents three standard deviations from the mean.</description></item><item><title>Prefix query</title><link>/docs/references/search/prefix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/search/prefix/</guid><description>Prefix query # Returns documents that contain a specific prefix in a provided field.
Examples # The following search returns documents where the org.id field contains a term that begins with inf.
GET /_search { &amp;#34;query&amp;#34;: { &amp;#34;prefix&amp;#34;: { &amp;#34;org.id&amp;#34;: { &amp;#34;value&amp;#34;: &amp;#34;inf&amp;#34; } } } } Top-level parameters for prefix # &amp;lt;field&amp;gt;
(Required, object) Field you wish to search. Parameters for &amp;lt;field&amp;gt; # value</description></item><item><title>Range query</title><link>/docs/references/search/range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/search/range/</guid><description>Range query # Returns documents that contain terms within a provided range.
Examples # The following search returns documents where the age field contains a term between 10 and 20.
GET /_search { &amp;#34;query&amp;#34;: { &amp;#34;range&amp;#34;: { &amp;#34;age&amp;#34;: { &amp;#34;gte&amp;#34;: 10, &amp;#34;lte&amp;#34;: 20 } } } } Top-level parameters for range # &amp;lt;field&amp;gt;
(Required, object) Field you wish to search. Parameters for &amp;lt;field&amp;gt; # gt</description></item><item><title>Regexp query</title><link>/docs/references/search/regexp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/search/regexp/</guid><description>Regexp query # Returns documents that contain terms matching a regular expression.
A regular expression is a way to match patterns in data using placeholder characters, called operators. For a list of operators supported by the regexp query, see Regular expression syntax.
Examples # The following search returns documents where the org.id field contains any term that begins with in and ends with y. The .* operators match any characters of any length, including no characters.</description></item><item><title>Region Settings</title><link>/docs/references/configuration/region_settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/configuration/region_settings/</guid><description>Get Region Settings # Returns the settings configured for the region.
Requests # GET /_cluster/_region/&amp;lt;region_id&amp;gt;/settings Path Parameters # region_id
(Required, String) The UUID of the region you want to query. A special ID _local can be specified to query the state of the region that handles this request. Query Parameters # include_defaults
(Optional, Boolean) If true, returns all default region settings. Defaults to false.</description></item><item><title>Sum aggregation</title><link>/docs/references/aggregation/sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/aggregation/sum/</guid><description>Sum aggregation # A single-value metrics aggregation that sums up numeric values that are extracted from the aggregated documents.
Examples # Assuming the data consists of documents representing sales records we can sum the sale price of all hats with:
POST /sales/_search { &amp;#34;query&amp;#34;: { &amp;#34;constant_score&amp;#34;: { &amp;#34;filter&amp;#34;: { &amp;#34;match&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;hat&amp;#34; } } } }, &amp;#34;aggs&amp;#34;: { &amp;#34;hat_prices&amp;#34;: { &amp;#34;sum&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;price&amp;#34; } } } } Resulting in:</description></item><item><title>Term query</title><link>/docs/references/search/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/search/term/</guid><description>Term query # Returns documents that contain an exact term in a provided field.
You can use the term query to find documents based on a precise value such as a price, a product ID, or a username.
Examples # GET /_search { &amp;#34;query&amp;#34;: { &amp;#34;term&amp;#34;: { &amp;#34;org.id&amp;#34;: { &amp;#34;value&amp;#34;: &amp;#34;infini&amp;#34; } } } } Top-level parameters for term # &amp;lt;field&amp;gt;
(Required, object) Field you wish to search.</description></item><item><title>Terms aggregation</title><link>/docs/references/aggregation/terms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/aggregation/terms/</guid><description>Terms aggregation # A multi-bucket value source based aggregation where buckets are dynamically built - one per unique value.
Examples # POST /_search { &amp;#34;aggs&amp;#34;: { &amp;#34;genres&amp;#34;: { &amp;#34;terms&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;genre&amp;#34; } } } } Response:
{ ... &amp;#34;aggregations&amp;#34;: { &amp;#34;genres&amp;#34;: { &amp;#34;doc_count_error_upper_bound&amp;#34;: 0, &amp;#34;sum_other_doc_count&amp;#34;: 0, &amp;#34;buckets&amp;#34;: [ { &amp;#34;key&amp;#34;: &amp;#34;electronic&amp;#34;, &amp;#34;doc_count&amp;#34;: 6 }, { &amp;#34;key&amp;#34;: &amp;#34;rock&amp;#34;, &amp;#34;doc_count&amp;#34;: 3 }, { &amp;#34;key&amp;#34;: &amp;#34;jazz&amp;#34;, &amp;#34;doc_count&amp;#34;: 2 } ] } } } Parameters for terms # field</description></item><item><title>Value count aggregation</title><link>/docs/references/aggregation/value-count/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/aggregation/value-count/</guid><description>Value count aggregation # A single-value metrics aggregation that counts the number of values that are extracted from the aggregated documents. Typically, this aggregator will be used in conjunction with other single-value aggregations. For example, when computing the avg one might be interested in the number of values the average is computed over.
value_count does not de-duplicate values, so even if a field has duplicates each value will be counted individually.</description></item><item><title>Cluster state</title><link>/docs/administration/observability/state/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/administration/observability/state/</guid><description>Cluster state # Returns an internal representation of the cluster state for debugging or diagnostic purposes.
Get the whole cluster state # Requests # GET /_cluster/state/&amp;lt;names&amp;gt; Path Parameters # names
(Optional, string) A comma-separated list of the following options:
_all
Shows all names. blocks
Shows the blocks part of the response. leader_node
Shows the leader_node part of the response. metadata
Shows the metadata part of the response.</description></item><item><title>Configuration</title><link>/docs/getting-started/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/configuration/</guid><description>Configuration # Pizza supports several methods to overwrite the default configuration.
Command lines # ➜ ./bin/pizza --help A Distributed Real-Time Search &amp;amp; AI-Native Innovation Engine. Usage: pizza [OPTIONS] [COMMAND] Commands: service Builtin service management (install, uninstall, start, stop) help Print this message or the help of the given subcommand(s) Options: -l, --log &amp;lt;LEVEL&amp;gt; Set the logging level, options: trace,debug,info,warn,error --debug Run in debug mode, panic immediately with full stack trace -c, --config &amp;lt;FILE&amp;gt; -p, --pid &amp;lt;FILE&amp;gt; Place pid to this file -E, --override &amp;lt;KEY=VALUE&amp;gt; -h, --help Print help -V, --version Print version Configuration file # You can fully customize Pizza by utilizing the pizza.</description></item><item><title>Delete a collection</title><link>/docs/references/collection/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/collection/delete/</guid><description>Delete a collection # Delete a exists collection.
Examples # The following request deletes the collection called my-collection:
DELETE my-collection Request # PUT /[&amp;lt;namespace&amp;gt;:]&amp;lt;name&amp;gt; Path Parameters # &amp;lt;namespace&amp;gt;
(Optional, string) The namespace which the collection belongs to. &amp;lt;name&amp;gt;
(Required, string) Name of the collection you wish to create.</description></item><item><title>Delete a namespace</title><link>/docs/references/namespace/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/namespace/delete/</guid><description>Delete a namespace # Delete a exists namespace.
Examples # The following request delete the namespace called website:
DELETE /_namespace/website Request # DELETE /_namespace/&amp;lt;name&amp;gt; Path parameters # &amp;lt;name&amp;gt;
(Optional, string) The name of the namespace that you want to delete.</description></item><item><title>Get collection</title><link>/docs/references/collection/get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/collection/get/</guid><description>Get collection # Returns information about one or more collections.
Examples # The following request gets all the collections under the default namespace:
GET /default:* Request # GET /&amp;lt;target&amp;gt; Path Parameters # target
(Required, String) Comma-separated, names of the collections to get (wildcard supported)</description></item><item><title>Get collection index</title><link>/docs/references/collection/get_index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/collection/get_index/</guid><description>Get collection index # See the following documents:
Get index Get index alias Get index mapping Get index settings</description></item><item><title>Get collection rollings</title><link>/docs/references/collection/get_rollings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/collection/get_rollings/</guid><description>Get collection rollings # Returns rollings information about one or more collections.
Examples # The following request gets the rollings information of all the collections under the default namespace:
GET /default:*/_rollings Retrieve the rollings information of all the collections:
GET /_rollings Request # GET /&amp;lt;target&amp;gt;/_rollings Path Parameters # target
(Optional, String) Comma-separated, names of the collections to get (wildcard supported)</description></item><item><title>Get collection schema</title><link>/docs/references/collection/get_schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/collection/get_schema/</guid><description>Get collection schema # Returns schema information about one or more collections.
Examples # The following request gets the schema information of all the collections under the default namespace:
GET /default:*/_schema Retrieve the schema information of all the collections:
GET /_schema Request # GET /&amp;lt;target&amp;gt;/_schema Path Parameters # target
(Optional, String) Comma-separated, names of the collections to get (wildcard supported)</description></item><item><title>Get collection settings</title><link>/docs/references/collection/get_settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/collection/get_settings/</guid><description>Get collection settings # Returns settings information about one or more collections.
Examples # The following request gets the settings information of all the collections under the default namespace:
GET /default:*/_settings Retrieve the settings information of all the collections:
GET /_settings Request # GET /&amp;lt;target&amp;gt;/_settings Path Parameters # target
(Optional, String) Comma-separated, names of the collections to get (wildcard supported)</description></item><item><title>Get index</title><link>/docs/references/index/get/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/index/get/</guid><description>Get index # Returns information about one or more indices
Examples # Get the information of all indices:
GET /_index Get the information of the index named my-index under collection my-collection:
GET /my-collection/_index/my-index Request # GET /_index GET /&amp;lt;target&amp;gt;/_index GET /&amp;lt;target&amp;gt;/_index/&amp;lt;index&amp;gt; Path Parameters # target
(Required, String) Comma-separated, names of the collections to specify (wildcard supported)
index
(Required, String) Comma-separated, names of the indices to get (wildcard supported)</description></item><item><title>Get index alias</title><link>/docs/references/index/get_alias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/index/get_alias/</guid><description>Get index alias # Returns alias information about one or more indices under the specified collection.
Examples # Get the alias information of the my-index index under collection my-collection:
GET /my-collection/_index/my-index/_alias Request # GET /&amp;lt;target&amp;gt;/_index/&amp;lt;index&amp;gt;/_alias GET /&amp;lt;target&amp;gt;/_index/_alias Path Parameters # target
(Required, String) Comma-separated, names of the collections to specify (wildcard supported)
index
(Optional, String) Comma-separated, names of the indices to get (wildcard supported)</description></item><item><title>Get index mapping</title><link>/docs/references/index/get_mapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/index/get_mapping/</guid><description>Get index mapping # Returns mapping information about one or more indices under the specified collection.
Examples # Get the mapping information of the my-index index under collection my-collection:
GET /my-collection/_index/my-index/_mapping Request # GET /&amp;lt;target&amp;gt;/_index/&amp;lt;index&amp;gt;/_mapping GET /&amp;lt;target&amp;gt;/_index/_mapping Path Parameters # target
(Required, String) Comma-separated, names of the collections to specify (wildcard supported)
index
(Optional, String) Comma-separated, names of the indices to get (wildcard supported)</description></item><item><title>Get index setting</title><link>/docs/references/index/get_settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/index/get_settings/</guid><description>Get index setting # Returns setting information about one or more indices under the specified collection.
Examples # Get the setting information of the my-index index under collection my-collection:
GET /my-collection/_index/my-index/_setting Request # GET /&amp;lt;target&amp;gt;/_index/&amp;lt;index&amp;gt;/_setting GET /&amp;lt;target&amp;gt;/_index/_setting Path Parameters # target
(Required, String) Comma-separated, names of the collections to specify (wildcard supported)
index
(Optional, String) Comma-separated, names of the indices to get (wildcard supported)</description></item><item><title>Type Parameter</title><link>/docs/references/types/type_parameter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/types/type_parameter/</guid><description>Type Parameter # analyzer: the analyzer used for indexing
search_analyzer: the analyzer used for searching
index_options: controls what information is added to the inverted index, available options are:
docs: Only the doc number is indexed. Can answer the question Does this term exist in this field? freqs: Doc number and term frequencies are indexed. Term frequencies are used to score repeated terms higher than single terms.</description></item><item><title>Pizza CLI</title><link>/docs/getting-started/cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/cli/</guid><description>Pizza CLI # The Pizza Command Line Interface (CLI) is a tool designed to facilitate quick and interactive communication with the Pizza server. It provides a convenient way for users to perform various tasks, such as querying data, managing configurations, and monitoring system status, directly from the command line.
Features # Interactive Querying # The Pizza CLI allows users to execute queries against the Pizza server interactively.</description></item><item><title>Architecture</title><link>/docs/overview/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/architecture/</guid><description>Architecture # Share-Nothing and Asynchronous I/O in Pizza # Pizza is built upon a robust share-nothing architecture, ensuring complete isolation of resources at both the node and per-CPU level. Each CPU core and associated threads operate independently, without sharing memory or resources with other cores or nodes. Additionally, Pizza embraces a fully asynchronous manner to access I/O and network resources, leveraging technologies like io_uring for efficient I/O operations.</description></item><item><title>Why named Pizza</title><link>/docs/overview/sharding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/sharding/</guid><description>Why named Pizza? # Do you wonder why this project is named Pizza?
To infinity scaling # Pizza solves the challenge of managing massive data seamlessly. Imagine creating a collection and continuously adding documents, from zero to petabytes, without the need to worry about sharding or reindexing. Scaling your machine becomes effortless, ensuring a smooth, seamless, and painless experience for application developers.
Sharding puzzle # One of the world&amp;rsquo;s three major challenges: What is the appropriate size for an index shard?</description></item><item><title>How realtime works</title><link>/docs/overview/realtime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/realtime/</guid><description>How realtime works? # Do you like to let your customer wait? # [Pizza in Realtime]</description></item><item><title>Fetch a document</title><link>/docs/references/document/fetch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/fetch/</guid><description>Fetch a document # Retrieve an existing document by specifying its unique identifier.
Examples # Fetch a document from the my-collection collection with customized uuid news_001:
GET /my-collection/_doc/news_001 The API returns the following result:
{ &amp;#34;_id&amp;#34;: &amp;#34;0,0&amp;#34;, &amp;#34;_version&amp;#34;: 1, &amp;#34;_collection&amp;#34;: &amp;#34;default:my-collection&amp;#34;, &amp;#34;_key&amp;#34; : &amp;#34;news_001&amp;#34;, &amp;#34;found&amp;#34;: true, &amp;#34;_source&amp;#34; : { &amp;#34;message&amp;#34;: &amp;#34;GET /search HTTP/1.1 200 1070000&amp;#34;, &amp;#34;org&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;infini&amp;#34; } } } As you can see, the customized uuid are represented as _key within the document, and there is also a _id returned with value 0,0, this is the internal id generated by Pizza, and it is guaranteed to be unique, so you can also fetch this document by this value like this:</description></item><item><title>Replace a document</title><link>/docs/references/document/replace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/replace/</guid><description>Replace a document # Replace an existing document by specifying its unique identifier and the new content.
Examples # Replace a document news_001 of the collection my-collection with new content:
PUT /my-collection/_doc/news_001 { &amp;#34;message&amp;#34;: &amp;#34;GET /search HTTP/1.1 200 1070000&amp;#34;, &amp;#34;org&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;infinilabs&amp;#34; } } The API returns as following result:
{&amp;#34;_id&amp;#34;:&amp;#34;0,0&amp;#34;, &amp;#34;_key&amp;#34;:&amp;#34;news_001&amp;#34;, &amp;#34;result&amp;#34;:&amp;#34;updated&amp;#34;} After the document modification, If you perform the fetch request:
GET /my-collection/_doc/news_001 It returns an updated document like:</description></item><item><title>Partial update a document</title><link>/docs/references/document/partial_update/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/partial_update/</guid><description>Partial update a document # Sometimes we may only need to update a portion fields of the document.
Examples # Update the org.id field of the document news_001 in the collection my-collection:
PUT /my-collection/_doc/news_001/_update { &amp;#34;sync&amp;#34;:{ &amp;#34;replace&amp;#34;:{ &amp;#34;org&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;infinilabs&amp;#34; } } } } The API returns as following result:
{&amp;#34;_id&amp;#34;:&amp;#34;0,0&amp;#34;, &amp;#34;_key&amp;#34;:&amp;#34;news_001&amp;#34;, &amp;#34;result&amp;#34;:&amp;#34;updated&amp;#34;} Pizza using the method of fetching a document, then merging partial updates and replacing it.</description></item><item><title>Delete a document</title><link>/docs/references/document/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/delete/</guid><description>Delete a document # Delete a specific document from the specified collection by specifying its unique identifier.
Examples # Delete the document 0,0 from collection my-collection:
DELETE /my-collection/_doc/0,0 The API returns the following result:
{ &amp;#34;_id&amp;#34;: &amp;#34;0,0&amp;#34;, &amp;#34;result&amp;#34;: &amp;#34;deleted&amp;#34;, ... } Request # DELETE /&amp;lt;target&amp;gt;/_doc/&amp;lt;doc_id&amp;gt; Path parameters # &amp;lt;target&amp;gt;
(Required, string) Name of the collection to target. &amp;lt;doc_id&amp;gt;
(Required, string) Unique identifier for the document, support both _key or _id.</description></item><item><title>Batch document operation</title><link>/docs/references/document/bulk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/references/document/bulk/</guid><description>Batch document operation # Provides a efficient way to perform multiple index, create, delete, and update operations in a single request.
Examples # POST /_bulk { &amp;#34;index&amp;#34; : { &amp;#34;_index&amp;#34; : &amp;#34;test&amp;#34;, &amp;#34;_id&amp;#34; : &amp;#34;1&amp;#34; } } { &amp;#34;field1&amp;#34; : &amp;#34;value1&amp;#34; } { &amp;#34;delete&amp;#34; : { &amp;#34;_index&amp;#34; : &amp;#34;test&amp;#34;, &amp;#34;_id&amp;#34; : &amp;#34;2&amp;#34; } } { &amp;#34;create&amp;#34; : { &amp;#34;_index&amp;#34; : &amp;#34;test&amp;#34;, &amp;#34;_id&amp;#34; : &amp;#34;3&amp;#34; } } { &amp;#34;field1&amp;#34; : &amp;#34;value3&amp;#34; } { &amp;#34;update&amp;#34; : {&amp;#34;_id&amp;#34; : &amp;#34;1&amp;#34;, &amp;#34;_index&amp;#34; : &amp;#34;test&amp;#34;} } { &amp;#34;doc&amp;#34; : {&amp;#34;field2&amp;#34; : &amp;#34;value2&amp;#34;} } The API returns the following result:</description></item></channel></rss>